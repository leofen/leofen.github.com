<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>leofen's blog</title>
 <link href="http://leofen.github.io/" rel="self"/>
 <link href="http://leofen.github.io"/>
 <updated>2013-06-02T13:42:17+08:00</updated>
 <id>http://leofen.github.io</id>
 <author>
   <name>leofen</name>
   <email>onlyinnju@gmail.com</email>
 </author>

 
 <entry>
   <title>coolshell上二级指针删除单链表节点的理解</title>
   <link href="http://leofen.github.io/%E9%9B%95%E8%99%AB%E5%B0%8F%E6%8A%80/2013/06/01/coolshell"/>
   <updated>2013-06-01T00:00:00+08:00</updated>
   <id>http://leofen.github.io/%E9%9B%95%E8%99%AB%E5%B0%8F%E6%8A%80/2013/06/01/coolshell</id>
   <content type="html">&lt;p&gt;今天重新看了一遍coolshell上关于&lt;a href=&#39;http://coolshell.cn/articles/8990.html&#39;&gt;二级指针删除单链表节点&lt;/a&gt;的文章，想起来看这个是因为最近在看linux的hlist实现，里面用到了二级指针，我当时就想到了之前看过的coolshell上的那篇文章。那篇文章其实之前就看过，也算看懂了是怎么回事，但算不上理解，基本当个trick在看，今天又仔细想了想，有了新的想法，写出来分享一下。至于hlist的一些想法，过两天再写。&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;二级指针怎么删节点coolshell上写的挺清楚的，我就不赘述了。coolshell上大多数文章都写得挺好我蛮喜欢看的，但其实这篇我觉得不够好，或者说不够深入。它顶多算是介绍了下这种方法，又带着读者跑了遍代码的逻辑，到此为止了。至于为什么会用这种方法，是怎么想到的，哪些场景下可以套用这种思路，就完全没有了，这不得不说是挺可惜的。此外，这篇文章里把这种思路渲染成了一种技巧一种trick，我挺讨厌这样的。因为在我看来，到c语言这个层次了，语言本身不应该有什么奇技淫巧在里面的，任何神乎其技的实现都是有简单清晰的思路在后面支持的，而这篇文章对这段代码的解读显然违背了这点，我现在用我的理解来尝试分析一下。&lt;/p&gt;

&lt;p&gt;先来看一下传统的写法：&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;c&#39;&gt;&lt;span class=&#39;lineno&#39;&gt; 1&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;node&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;remove_if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;node&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;head&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;remove_fn&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 2&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 3&lt;/span&gt;     &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;node&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;prev&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;NULL&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;curr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;head&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;curr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;!=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;NULL&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 4&lt;/span&gt;     &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 5&lt;/span&gt;         &lt;span class=&#39;n&#39;&gt;node&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;const&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;curr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;next&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 6&lt;/span&gt;         &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;curr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 7&lt;/span&gt;         &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 8&lt;/span&gt;             &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;prev&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 9&lt;/span&gt;                 &lt;span class=&#39;n&#39;&gt;prev&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;next&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;10&lt;/span&gt;             &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;11&lt;/span&gt;                 &lt;span class=&#39;n&#39;&gt;head&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;12&lt;/span&gt;             &lt;span class=&#39;n&#39;&gt;free&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;curr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;13&lt;/span&gt;         &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;14&lt;/span&gt;         &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;15&lt;/span&gt;             &lt;span class=&#39;n&#39;&gt;prev&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;curr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;16&lt;/span&gt;         &lt;span class=&#39;n&#39;&gt;curr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;17&lt;/span&gt;     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;18&lt;/span&gt;     &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;head&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;19&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到第8行的if语句，实际上就是对是否头结点两种情况的分支处理。从抽象的链表的角度来考虑，头结点需要特殊处理是因为：在单链表中，删除一个节点时需要把它的前一个节点和后一个节点连起来，而头结点不存在前一个节点，所以需要特殊处理。这个逻辑非常清晰，也非常正确，我觉得如果是这么理解c语言里的链表，那这种写法简直是天经地义，那种二重指针的才是脑子被驴踢了才会想出来的。&lt;/p&gt;

&lt;p&gt;而现在我们尝试用一种更low-level的思路去考虑链表。在c语言中，链表节点是什么？链表节点就是一个地址加上别的数据，这个地址指示着下一个节点的位置（其实就是指针啊）。每个节点都有下一个节点的地址，这样整个链表的内容我们就都能获得了。但是这里有个问题，第一个节点怎么办？它没有前一个节点啊？ok没事有地址要访问，没有地址给你个地址去访问，所以我们会有head这个指针，用来指向第一个节点。这样我们的链表中，每个节点都有一个指针指着，而且环环相扣。&lt;/p&gt;

&lt;p&gt;而在删除节点时，发生了什么？如果直接删除一个节点，那我们失去了什么？那个节点的数据，这个不要紧，我们删掉它说明本来就不要数据了，不是问题；下一个节点的位置，这个比较要命，我们的链表断了；上一个节点中存储的下一个节点的地址，这个其实是最严重的问题，因为此时这个地址已经没有意义了，访问会带来不知道什么后果。所以链表节点的删除需要做一些额外的工作，其实就是一句话：&lt;strong&gt;把之前存储当前节点地址的指针的值替换成下一个节点的地址&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;你有没有发现，此时我们没有“上一个节点”这个概念了，存储当前节点地址的指针是在别的节点中还是就是head指针，这无所谓，我们只要关注指针的值就可以了。&lt;/p&gt;

&lt;p&gt;如果还觉得迷糊，可以看下面的图：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;fg_1&#39; src=&#39;/picture/2013_6_1_fg_1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;这就是普通单链表的结构，如果我们想删除一个普通节点，那么我们需要把指向下一个节点的指针赋给指向当前节点的指针。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;fg_2&#39; src=&#39;/picture/2013_6_1_fg_2.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;而删除头结点时，其实没有区别，我们也是把指向下一个节点的指针赋给指向当前节点的指针，只不过这个指针就是head指针，但说到底，它还是个指针。所以没有什么本质区别。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;fg_3&#39; src=&#39;/picture/2013_6_1_fg_3.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;我们再回过头看下传统代码的实现&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;c&#39;&gt;&lt;span class=&#39;lineno&#39;&gt;1&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;prev&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;2&lt;/span&gt;     &lt;span class=&#39;n&#39;&gt;prev&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;next&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;3&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;4&lt;/span&gt;     &lt;span class=&#39;n&#39;&gt;head&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这不就是在改指针的值么？！只是这里是通过node去访问普通节点的指针，而用head这个标识符来访问head指针。既然都是指针何必脱裤子放屁呢，用一个二重指针指向指向当前节点的指针，直接通过它修改指针的值就是了（修改一重指针的值需要用二重指针操作）。&lt;/p&gt;

&lt;p&gt;ok最后总结一下，为什么会想到二重指针操作的写法？因为我们意识到删除操作的本质是指针值的改变，这样用二重指针去操纵指针的值就是很自然的想法。思考一个操作的本质是编程的重要组成部分，它能帮助我们更好地理解代码的逻辑，同时也能避免在外围无用操作上浪费精力，如果你想揍一头牛，去直接揍就是了，不要练什么“隔山打牛”的功夫，免得隔不同山的时候还要变化拳路。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>超级英雄联盟的吐槽</title>
   <link href="http://leofen.github.io/%E6%89%AF%E6%B7%A1/2013/05/24/"/>
   <updated>2013-05-24T00:00:00+08:00</updated>
   <id>http://leofen.github.io/%E6%89%AF%E6%B7%A1/2013/05/</id>
   <content type="html">&lt;p&gt;最近事儿其实不少，但自从发现了这个&lt;a href=&#39;http://movie.douban.com/doulist/1698395/&#39;&gt;豆列&lt;/a&gt;以后，我心态重回十八岁，每天怎么也搞个两集看看,主要看那个动画版的正义联盟。当然，我是抱着批判的思想去看待这些资本主义国家的动画的，在连续几天关于DC的持续批判性思考后，我敏锐地认识到了这类英雄联盟电影的一些问题，今天抓出来揭露一下。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 id=&#39;id1&#39;&gt;各英雄心怀鬼胎&lt;/h3&gt;

&lt;p&gt;我们可以看到，即使是超级英雄，他们也逃脱不掉“三个和尚没水喝”这个金科玉律。虽然这些超级英雄是以“遇到了个人无法对抗的邪恶力量”为名义组建联盟的，但明眼人就能看出来，大部分人在里面都没有尽全力。&lt;/p&gt;

&lt;p&gt;比如说那个超人，我们知道超人是很牛逼的。有多牛逼呢？牛逼到在超人的个人作品中，反派从来不会考虑和他直接对刚这种事情，要么找氪石搞他要么直接搞掉太阳（超人的能力源于太阳），牛到这种程度。但是在这部动画中，我们看到一个这样的超人：他每次出场都会被胖揍一顿；他每次上天或者下海还要穿类似宇航服一样的东西；他常年被反派用麻药麻翻了抓起来。没错就是麻药，这不是水浒传里面的伎俩么！你一20世纪的英雄被这玩意撂倒了？&lt;/p&gt;

&lt;p&gt;再说那个闪电侠，我国已故著名武术大师火云邪神说过：“天下武功，无所不破，唯快不破。”我一直深信这句话。所以在我的观念里，速度能超过光速的闪电侠是最猛的。但我们来看一下这部动画里闪电侠的战斗流程：反派出现-&amp;gt;闪电侠吐槽或者卖萌（这对他而言就像吃饭拉屎一样自然）-&amp;gt;闪电侠出击-&amp;gt;反派扔两个球到地上-&amp;gt;闪电侠滑倒了，昏了过去-&amp;gt;战斗结束。&lt;/p&gt;

&lt;p&gt;最让我不能接受的就是火星猎人了，他是有虚化的能力的，就像魔兽争霸里的白牛一样，可以不受物理攻击的。这么牛逼一人，动不动被捆得跟粽子一样关起来然后一脸悲愤地骂娘。每到这个时候我就想拍着桌子怒吼：“你丫被抓了骂娘有个屁用，你会虚化啊！你直接溜啊！”。&lt;/p&gt;

&lt;p&gt;屏幕里的火星猎人依然顽强地在骂着娘，反派过来来了一记闷棍， 他就晕过去了。&lt;/p&gt;

&lt;h3 id=&#39;id2&#39;&gt;反派特别事儿妈&lt;/h3&gt;

&lt;p&gt;我不知道是什么时候学会“事儿妈”这词的，应该是上了大学认识了一些东北人以后。这个词解决了我长久以来的一个纠结，我一直觉得，电视里的反派都有点太什么了以致老是失败，认识这个词以后，它就完美地替代了“什么”。这个词充分揭示了反派失败的根源。&lt;/p&gt;

&lt;p&gt;一般来说，在剧情的中后期，反派一定是一度占据上风的，一般成功地抓了大半的超级英雄关着。这时候坑爹的事情就来了，反派明明没有“一定不能逾越法律”这种狗屁倒灶的顽固思维，但他们就是不立刻干掉这帮超级英雄，非惦记着凑齐了人来桌麻将或者让他们见识什么“最壮观的景象”。后面的事情我们就都知道了，剩下的那个没被抓的超级英雄小宇宙爆发，救出所有英雄，然后一起揍反派。是不是听起来蛮熟悉的？这他娘的不就是西游记么！妖怪抓着唐僧了老是不先手起刀落非洗干净了再蒸，这不给自己找事么。&lt;/p&gt;

&lt;p&gt;可以看到，美国这帮编剧思维局限性还是非常大的，这么多年了楞是没跳出《西游记》那个路子，以至于我当年对西游记的吐槽都可以原封不动地搬来。&lt;/p&gt;

&lt;h3 id=&#39;id3&#39;&gt;英雄智商堪忧&lt;/h3&gt;

&lt;p&gt;本来吧，在没看这个动画之前，我一直很替蝙蝠侠担心。我总觉得他一肉体凡胎的，跟一群超能力者上天入地的太危险了，而且如果一对比显得他特别弱是不是太丢脸了。&lt;/p&gt;

&lt;p&gt;事实证明我多虑了……&lt;/p&gt;

&lt;p&gt;现实是，如果老爷落单了，他光凭嘴炮和美刀就能搞定大多数脑子转不过来的反派，而正义联盟的别的人要是离了老爷，撞上反派就像一群疯狗遇到城管大队打狗分队了，一会就给收拾妥帖了。老爷一凡人混成这样，真给人类长脸。但是看到超人之流那没比脊髓反应好多少的思维能力，还是让人觉得有点受不了。&lt;/p&gt;

&lt;p&gt;为什么会这样呢？我经过长久的思考，凭借我极高的智商，终于破解了真相。&lt;/p&gt;

&lt;p&gt;其实事情是这样的，在编剧的设定中，反派的智商大概是130，普通英雄的智商大概是110，而老爷由于没有超能力，属于智力型英雄，智力高出别人一大截，大致是160。这样剧情就既充满打斗，还有充分的斗智斗勇，好看啊！&lt;/p&gt;

&lt;p&gt;但是，问题出现了，编剧的智商没有160，怎么表现老爷那高达160的智商呢？&lt;/p&gt;

&lt;p&gt;这真是个千古难题，最后编剧咬咬牙跺跺脚，拼尽自己的智商，再加上点上帝视角作弊，老爷的智商总算看起来有120了。然后反派和普通英雄的智商向下顺延，于是我们就看到蝙蝠侠带着一群智商70的壮汉和一群智商90的反派成天打架斗殴。&lt;/p&gt;

&lt;p&gt;这尼玛，还不如带两条边境牧羊犬呢，所不定还聪明点。&lt;/p&gt;

&lt;p&gt;最后随便扯一句，主题曲太难听了，我个人认为换成下面这首会好很多：&lt;/p&gt;
&lt;audio controls=&#39;controls&#39; src=&#39;http://mu.qpsdsf.com/1.mp3&#39;&gt;
Your browser does not support the audio element.
&lt;/audio&gt;</content>
 </entry>
 
 <entry>
   <title>通过ssh和lftp在虚拟机和主机间传送文件</title>
   <link href="http://leofen.github.io/%E9%9B%95%E8%99%AB%E5%B0%8F%E6%8A%80/2013/05/20/sshlftp"/>
   <updated>2013-05-20T00:00:00+08:00</updated>
   <id>http://leofen.github.io/%E9%9B%95%E8%99%AB%E5%B0%8F%E6%8A%80/2013/05/20/sshlftp</id>
   <content type="html">&lt;p&gt;前两天我用虚拟机装了个archlinux，为了训练自己对命令的熟悉度，我决定不装X桌面。&lt;/p&gt;

&lt;p&gt;好吧说实话是没装起来……&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;这两天用用感觉还不错，反正没打算用这玩意看电影什么的（还真有人这么干的&lt;a href=&#39;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=ji0A3kOAc9U#at=274&#39;&gt;视频链接需翻墙&lt;/a&gt;）。但有件事让我觉得很头疼，就是没办法 像另一台ubuntu虚拟机一样往里面复制东西，这有时候还是挺不方便的。&lt;/p&gt;

&lt;p&gt;一开始我想了个什么法子来传文件呢？我想把我的vim配置弄过去，于是我把.vim和.vimrc打包了上传到某个网盘，然后生成下载链接，再用google的短链接服务转成短链接，再回到arch里面用wget把短链接下下来……&lt;/p&gt;

&lt;p&gt;这他娘的简直是麻烦他妈给麻烦开门——麻烦到家了。&lt;/p&gt;

&lt;p&gt;我一会就忍无可忍了，但是上网搜了一下发现几乎所有教程都是围绕vmware-tools这类虚拟机功能或者windows下的一些软件介绍的。无奈去我们学校的linux群问了下，有人表示可以通过openssh和sftp来实现，这个听起来蛮好（diao）的，于是我决定试试。&lt;/p&gt;

&lt;p&gt;arch有个好处在于，它的文档真的是太丰富了，最值得惊喜的是，中文文档竟然也非常完善，所以arch有了问题基本不需要去google什么，直接查wiki就是了。很轻松就找到了openssh的&lt;a href=&#39;https://wiki.archlinux.org/index.php/Secure_Shell_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87&#39;&gt;页面&lt;/a&gt;)，根据上面的信息，通过&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;c&#39;&gt;# pacman -S openssh \\安装openssh&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# systemctl start sshd \\开启server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就在虚拟机上开启了ssh的服务端进程了。接下来我们需要在主机端用sftp访问虚拟机，这也相当简单&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;sftp 虚拟机上的用户名@虚拟机ip //虚拟机ip可通过ifconfig查看
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后会叫你输入密码，就是你虚拟机上那个账号对应的密码。输入正确后就登陆到你的虚拟机上了，可以用put上传主机的文件，也可以用get从虚拟机下载文件,bye命令或者ctrl-D退出。前途一片光明，未来不可限量。&lt;/p&gt;

&lt;p&gt;但是我一会就又觉得不爽了，主要是在sftp下和普通的shell下感觉太不一样的，这货甚至不能TAB补全！它甚至连用上键调用刚刚输入过的命令都不行！&lt;/p&gt;

&lt;p&gt;然后我搜了一下看有没有办法让sftp能补全，发现是有&lt;a href=&#39;http://askubuntu.com/questions/14645/is-it-possible-to-get-tab-completion-with-sftp&#39;&gt;结果&lt;/a&gt;的,但是这玩意说实话看起来就来者不善，最要命的是里面有看起来就像段乱码的sed命令，这玩意挂了我可没信心改对它。不过下面一个人的回复引起了我的注意：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another alternative: use lftp instead, which has superb built in tab completion (but that&amp;#8217;ll be once you start it, not in the shell.) It can talk sftp and many other protocols&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;lftp我早用过，用起来还是挺顺手的，于是我查了下怎么用lftp来登陆。结果发现异常简单：&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;lftp sftp://用户名@ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就和平时用lftp一样了，直接输入命令在虚拟机端执行，用!执行本地命令，TAB补全什么的都有，这就很方便了。&lt;/p&gt;

&lt;p&gt;补：写完再随手搜了一下，发现其实scp就可以搞定了，不用这么脱裤子放屁的=。=&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>hello world</title>
   <link href="http://leofen.github.io/%E6%B5%8B%E8%AF%95/2013/05/18/hello-world"/>
   <updated>2013-05-18T00:00:00+08:00</updated>
   <id>http://leofen.github.io/%E6%B5%8B%E8%AF%95/2013/05/18/hello-world</id>
   <content type="html">&lt;p&gt;测试一些显示情况&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;代码测试&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;c&#39;&gt;&lt;span class=&#39;lineno&#39;&gt;1&lt;/span&gt; &lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;2&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;3&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;4&lt;/span&gt;     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;hello&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;5&lt;/span&gt;     &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;6&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图片测试 &lt;img alt=&#39;githubcat&#39; src=&#39;/picture/githubcat.jpg&#39; title=&#39;章鱼猫&#39; width=&#39;400&#39; /&gt;&lt;/p&gt;

&lt;p&gt;中文换行&lt;/p&gt;

&lt;p&gt;测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试asdfasfp测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试&lt;/p&gt;</content>
 </entry>
 
 
</feed>